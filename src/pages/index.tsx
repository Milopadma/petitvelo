import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
//user imports
import moment, { Moment } from "moment";
import { ScrollArea } from "@mantine/core";
import { useState } from "react";

//placeholder data for timeline
const groups = [
  { id: 1, title: "group 1" },
  { id: 2, title: "group 2" },
  { id: 3, title: "group 3" },
  { id: 4, title: "group 4" },
  { id: 5, title: "group 5" },
  { id: 6, title: "group 6" },
  { id: 7, title: "group 7" },
];

const items = [
  {
    id: 1,
    group: 1,
    title: "item 1",
    start_time: moment(),
    end_time: moment().add(3, "hour"),
  },
  {
    id: 2,
    group: 2,
    title: "item 2",
    start_time: moment().add(-0.5, "hour"),
    end_time: moment().add(0.5, "hour"),
  },
  {
    id: 3,
    group: 1,
    title: "item 3",
    start_time: moment().add(2, "hour"),
    end_time: moment().add(3, "hour"),
  },
];

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col">
        <div className="flex w-full items-center justify-center bg-neutral-200 pt-6 text-2xl text-blue-500">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
        <ScrollArea className="min-w-screen">
          <div className="min-w-fit">
            <Timeline />
          </div>
        </ScrollArea>
      </main>
    </>
  );
};

// timeline starts at the first monday of the week
const getStartOfWeek = (date: Moment) => {
  const startOfWeek = date.clone().startOf("week");
  if (startOfWeek.day() !== 1) {
    startOfWeek.add(1, "week");
  }
  return startOfWeek;
};

// timeline ends at the last sunday of the week
const getEndOfWeek = (date: Moment) => {
  const endOfWeek = date.clone().endOf("week");
  if (endOfWeek.day() !== 0) {
    endOfWeek.subtract(1, "week");
  }
  return endOfWeek;
};

// timeline
const Timeline = () => {
  const [date, setDate] = useState(moment());
  const startOfWeek = getStartOfWeek(date);
  const endOfWeek = getEndOfWeek(date);

  return (
    <div className="flex flex-col">
      {/* for the week prev and next */}
      <div className="flex flex-row">
        <button
          className="rounded-l bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700"
          onClick={() => setDate(date.clone().subtract(1, "week"))}
        >
          Prev
        </button>
        <div className="bg-blue-500 py-2 px-4 font-bold text-white">
          {startOfWeek.format("MMM Do")} - {endOfWeek.format("MMM Do")}
        </div>
        <button
          className="rounded-r bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700"
          onClick={() => setDate(date.clone().add(1, "week"))}
        >
          Next
        </button>
      </div>
      {/* for the left side column groups*/}
      <div className="flex flex-row">
        <div className="flex w-1/7 flex-col justify-around">
          {groups.map((group) => (
            <div className="bg-blue-500 py-3 px-4 font-bold text-white">
              {group.title}
            </div>
          ))}
        </div>
        {/* for the day squares row */}
        <div className="flex w-5/6 flex-col">
          <div className="flex flex-row">
            {Array.from({ length: 7 }).map((_, i) => {
              const day = startOfWeek.clone().add(i, "day");
              return (
                <div className="w-1/7 flex flex-col">
                  <div className="bg-blue-500 py-2 px-4 font-bold text-white">
                    {day.format("ddd")}
                  </div>
                  <div className="bg-blue-300 py-2 px-4 font-bold text-white">
                    {day.format("MMM Do")}
                  </div>
                </div>
              );
            })}
          </div>
          {/* for the item views */}
          <div className="flex flex-row">
            {Array.from({ length: 7 }).map((_, i) => {
              const day = startOfWeek.clone().add(i, "day");
              return (
                <div className="w-1/7 flex flex-col">
                  {items
                    .filter((item) => item.start_time.isSame(day, "day"))
                    .map((item) => (
                      <div
                        className="bg-blue-200 py-2 px-4 font-bold text-white"
                        style={{
                          width: `${item.end_time.diff(
                            item.start_time,
                            "minutes"
                          )}px`,
                          left: `${item.start_time.diff(day, "minutes")}px`,
                        }}
                      >
                        {item.title}
                      </div>
                    ))}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;
